{"ast":null,"code":"import { all, takeLatest, put, call } from \"redux-saga/effects\";\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart, updateCartSuccess, updateCartFailure } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart(payload) {\n  try {\n    console.log(\"transaction\", payload); // const userId = currentUser.id;\n    // console.log(\"item\", item);\n    // // Retrieve user cart items from firestore collection\n    // const cartItems = yield getCartItems(userId);\n    // let updatedCartItems = [];\n    // switch (type) {\n    //   case \"add\":\n    //     updatedCartItems = yield addItemToCart(cartItems, item);\n    //     break;\n    //   case \"remove\":\n    //     updatedCartItems = yield removeItemFromCart(cartItems, item);\n    //     break;\n    //   default:\n    //     break;\n    // }\n    // // Update users cart on firebase with new updated cart\n    // yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n    //   cartItems: updatedCartItems,\n    // });\n    // // Update cart items on client side\n    // yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}","map":{"version":3,"sources":["/Users/tonysoukkeo/Desktop/Coding/crown-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","takeLatest","put","call","addItemToCart","getCartItems","removeItemFromCart","UserActionTypes","clearCart","updateCartSuccess","updateCartFailure","CartActionTypes","firestore","clearCartOnSignOut","updateCart","payload","console","log","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onUpdateCart","UPDATE_CART_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,kBAAtC,QAAgE,cAAhE;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,SACEC,SADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,gBAJP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMX,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;;AAED,UAAUM,UAAV,CAAqBC,OAArB,EAA8B;AAC5B,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,OAA3B,EADE,CAEF;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACD,GA7BD,CA6BE,OAAOG,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACQ,iBAAiB,CAACQ,KAAD,CAAlB,CAAT;AACD;AACF;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,QAAMlB,UAAU,CAACM,eAAe,CAACa,gBAAjB,EAAmCP,kBAAnC,CAAhB;AACD;;AAED,UAAUQ,YAAV,GAAyB;AACvB,QAAMpB,UAAU,CAACU,eAAe,CAACW,iBAAjB,EAAoCR,UAApC,CAAhB;AACD;;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAMvB,GAAG,CAAC,CAACG,IAAI,CAACgB,gBAAD,CAAL,EAAyBhB,IAAI,CAACkB,YAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, put, call } from \"redux-saga/effects\";\n\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\n\nimport {\n  clearCart,\n  updateCartSuccess,\n  updateCartFailure,\n} from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart(payload) {\n  try {\n    console.log(\"transaction\", payload);\n    // const userId = currentUser.id;\n    // console.log(\"item\", item);\n    // // Retrieve user cart items from firestore collection\n    // const cartItems = yield getCartItems(userId);\n\n    // let updatedCartItems = [];\n\n    // switch (type) {\n    //   case \"add\":\n    //     updatedCartItems = yield addItemToCart(cartItems, item);\n    //     break;\n\n    //   case \"remove\":\n    //     updatedCartItems = yield removeItemFromCart(cartItems, item);\n    //     break;\n\n    //   default:\n    //     break;\n    // }\n\n    // // Update users cart on firebase with new updated cart\n    // yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n    //   cartItems: updatedCartItems,\n    // });\n\n    // // Update cart items on client side\n    // yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}\n"]},"metadata":{},"sourceType":"module"}