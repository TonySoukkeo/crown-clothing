{"ast":null,"code":"import { all, takeLatest, put, call } from \"redux-saga/effects\";\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart, updateCartSuccess, updateCartFailure } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCartItems() {\n  try {} catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* addItem({\n  payload: {\n    item,\n    currentUser\n  }\n}) {\n  try {\n    const userId = currentUser.id; // Retrieve user cart items from firestore collection\n\n    const cartItems = yield getCartItems(userId);\n    const updatedCartItems = yield addItemToCart(cartItems, item); // Update users cart on firebase with new updated cart\n\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems\n    }); // Update cart items on client side\n\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* removeItem({\n  payload: {\n    item,\n    currentUser\n  }\n}) {\n  try {\n    const userId = currentUser.id; // Retrieve user cart items from firestore collection\n\n    const cartItems = yield getCartItems(userId);\n    const updatedCartItems = yield removeItemFromCart(cartItems, item);\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems\n    }); // Update cart items on client side\n\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onAddItem() {\n  yield takeLatest(CartActionTypes.ADD_ITEM_START, addItem);\n}\n\nfunction* onRemoveItem() {\n  yield takeLatest(CartActionTypes.REMOVE_ITEM_START, removeItem);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onAddItem), call(onRemoveItem)]);\n}","map":{"version":3,"sources":["/Users/tonysoukkeo/Desktop/Coding/crown-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","takeLatest","put","call","addItemToCart","getCartItems","removeItemFromCart","UserActionTypes","clearCart","updateCartSuccess","updateCartFailure","CartActionTypes","firestore","clearCartOnSignOut","updateCartItems","error","addItem","payload","item","currentUser","userId","id","cartItems","updatedCartItems","collection","doc","set","removeItem","onSignOutSuccess","SIGN_OUT_SUCCESS","onAddItem","ADD_ITEM_START","onRemoveItem","REMOVE_ITEM_START","cartSagas"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, call } from \"redux-saga/effects\";\n\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\n\nimport {\n  clearCart,\n  updateCartSuccess,\n  updateCartFailure,\n} from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCartItems() {\n  try {\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* addItem({ payload: { item, currentUser } }) {\n  try {\n    const userId = currentUser.id;\n\n    // Retrieve user cart items from firestore collection\n    const cartItems = yield getCartItems(userId);\n\n    const updatedCartItems = yield addItemToCart(cartItems, item);\n\n    // Update users cart on firebase with new updated cart\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems,\n    });\n\n    // Update cart items on client side\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* removeItem({ payload: { item, currentUser } }) {\n  try {\n    const userId = currentUser.id;\n\n    // Retrieve user cart items from firestore collection\n    const cartItems = yield getCartItems(userId);\n\n    const updatedCartItems = yield removeItemFromCart(cartItems, item);\n\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems,\n    });\n\n    // Update cart items on client side\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onAddItem() {\n  yield takeLatest(CartActionTypes.ADD_ITEM_START, addItem);\n}\n\nfunction* onRemoveItem() {\n  yield takeLatest(CartActionTypes.REMOVE_ITEM_START, removeItem);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onAddItem), call(onRemoveItem)]);\n}\n"]},"metadata":{},"sourceType":"module"}