{"ast":null,"code":"import { all, takeLatest, put, call } from \"redux-saga/effects\";\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart, updateCartSuccess, updateCartFailure } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart({\n  payload: {\n    item,\n    transaction: {\n      type,\n      currentUser\n    }\n  }\n}) {\n  try {\n    const userId = currentUser.id;\n    console.log(\"item\", item); // Retrieve user cart items from firestore collection\n\n    const cartItems = yield getCartItems(userId);\n    let updatedCartItems = [];\n\n    switch (type) {\n      case \"add\":\n        updatedCartItems = yield addItemToCart(cartItems, item);\n        break;\n\n      case \"remove\":\n        updatedCartItems = yield removeItemFromCart(cartItems, item);\n        break;\n\n      default:\n        break;\n    } // Update users cart on firebase with new updated cart\n\n\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems\n    }); // Update cart items on client side\n\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}","map":{"version":3,"sources":["/Users/tonysoukkeo/Desktop/Coding/crown-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","takeLatest","put","call","addItemToCart","getCartItems","removeItemFromCart","UserActionTypes","clearCart","updateCartSuccess","updateCartFailure","CartActionTypes","firestore","clearCartOnSignOut","updateCart","payload","item","transaction","type","currentUser","userId","id","console","log","cartItems","updatedCartItems","collection","doc","set","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onUpdateCart","UPDATE_CART_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,kBAAtC,QAAgE,cAAhE;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,SACEC,SADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,gBAJP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMX,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;;AAED,UAAUM,UAAV,CAAqB;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IADO;AAEPC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAFN;AADU,CAArB,EAKG;AACD,MAAI;AACF,UAAMC,MAAM,GAAGD,WAAW,CAACE,EAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,IAApB,EAFE,CAGF;;AACA,UAAMQ,SAAS,GAAG,MAAMnB,YAAY,CAACe,MAAD,CAApC;AAEA,QAAIK,gBAAgB,GAAG,EAAvB;;AAEA,YAAQP,IAAR;AACE,WAAK,KAAL;AACEO,QAAAA,gBAAgB,GAAG,MAAMrB,aAAa,CAACoB,SAAD,EAAYR,IAAZ,CAAtC;AACA;;AAEF,WAAK,QAAL;AACES,QAAAA,gBAAgB,GAAG,MAAMnB,kBAAkB,CAACkB,SAAD,EAAYR,IAAZ,CAA3C;AACA;;AAEF;AACE;AAVJ,KARE,CAqBF;;;AACA,UAAMJ,SAAS,CAACc,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCR,WAAW,CAACE,EAA9C,EAAkDO,GAAlD,CAAsD;AAC1DJ,MAAAA,SAAS,EAAEC;AAD+C,KAAtD,CAAN,CAtBE,CA0BF;;AACA,UAAMvB,GAAG,CAACO,iBAAiB,CAACgB,gBAAD,CAAlB,CAAT;AACD,GA5BD,CA4BE,OAAOI,KAAP,EAAc;AACd,UAAM3B,GAAG,CAACQ,iBAAiB,CAACmB,KAAD,CAAlB,CAAT;AACD;AACF;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,QAAM7B,UAAU,CAACM,eAAe,CAACwB,gBAAjB,EAAmClB,kBAAnC,CAAhB;AACD;;AAED,UAAUmB,YAAV,GAAyB;AACvB,QAAM/B,UAAU,CAACU,eAAe,CAACsB,iBAAjB,EAAoCnB,UAApC,CAAhB;AACD;;AAED,OAAO,UAAUoB,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CAACG,IAAI,CAAC2B,gBAAD,CAAL,EAAyB3B,IAAI,CAAC6B,YAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, put, call } from \"redux-saga/effects\";\n\nimport { addItemToCart, getCartItems, removeItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\n\nimport {\n  clearCart,\n  updateCartSuccess,\n  updateCartFailure,\n} from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart({\n  payload: {\n    item,\n    transaction: { type, currentUser },\n  },\n}) {\n  try {\n    const userId = currentUser.id;\n    console.log(\"item\", item);\n    // Retrieve user cart items from firestore collection\n    const cartItems = yield getCartItems(userId);\n\n    let updatedCartItems = [];\n\n    switch (type) {\n      case \"add\":\n        updatedCartItems = yield addItemToCart(cartItems, item);\n        break;\n\n      case \"remove\":\n        updatedCartItems = yield removeItemFromCart(cartItems, item);\n        break;\n\n      default:\n        break;\n    }\n\n    // Update users cart on firebase with new updated cart\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems,\n    });\n\n    // Update cart items on client side\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}\n"]},"metadata":{},"sourceType":"module"}