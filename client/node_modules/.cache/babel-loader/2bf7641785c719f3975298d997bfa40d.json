{"ast":null,"code":"import { all, takeLatest, put, call } from \"redux-saga/effects\";\nimport { addItemToCart, getCartItems, removeItemFromCart, clearItemFromCart } from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart, updateCartSuccess, updateCartFailure } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart({\n  payload: {\n    currentUser,\n    item,\n    type\n  }\n}) {\n  try {\n    const userId = currentUser.id;\n    let updatedCartItems = [];\n\n    if (type !== \"clear-cart\") {\n      // Retrieve user cart items from firestore collection\n      const cartItems = yield call(getCartItems, userId);\n\n      switch (type) {\n        case \"add\":\n          updatedCartItems = yield call(addItemToCart, cartItems, item);\n          break;\n\n        case \"remove\":\n          updatedCartItems = yield call(removeItemFromCart, cartItems, item);\n          break;\n\n        case \"clear-item\":\n          updatedCartItems = yield call(clearItemFromCart, cartItems, item);\n          break;\n\n        default:\n          break;\n      }\n    } // Update users cart on firebase with new updated cart\n\n\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems\n    }); // Update cart items on client side\n\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}","map":{"version":3,"sources":["/Users/tonysoukkeo/Desktop/Coding/crown-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","takeLatest","put","call","addItemToCart","getCartItems","removeItemFromCart","clearItemFromCart","UserActionTypes","clearCart","updateCartSuccess","updateCartFailure","CartActionTypes","firestore","clearCartOnSignOut","updateCart","payload","currentUser","item","type","userId","id","updatedCartItems","cartItems","collection","doc","set","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onUpdateCart","UPDATE_CART_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACEC,aADF,EAEEC,YAFF,EAGEC,kBAHF,EAIEC,iBAJF,QAKO,cALP;AAMA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,SACEC,SADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,gBAJP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMZ,GAAG,CAACO,SAAS,EAAV,CAAT;AACD;;AAED,UAAUM,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA;AAArB;AAAX,CAArB,EAA+D;AAC7D,MAAI;AACF,UAAMC,MAAM,GAAGH,WAAW,CAACI,EAA3B;AAEA,QAAIC,gBAAgB,GAAG,EAAvB;;AAEA,QAAIH,IAAI,KAAK,YAAb,EAA2B;AACzB;AACA,YAAMI,SAAS,GAAG,MAAMpB,IAAI,CAACE,YAAD,EAAee,MAAf,CAA5B;;AAEA,cAAQD,IAAR;AACE,aAAK,KAAL;AACEG,UAAAA,gBAAgB,GAAG,MAAMnB,IAAI,CAACC,aAAD,EAAgBmB,SAAhB,EAA2BL,IAA3B,CAA7B;AACA;;AAEF,aAAK,QAAL;AACEI,UAAAA,gBAAgB,GAAG,MAAMnB,IAAI,CAACG,kBAAD,EAAqBiB,SAArB,EAAgCL,IAAhC,CAA7B;AACA;;AAEF,aAAK,YAAL;AACEI,UAAAA,gBAAgB,GAAG,MAAMnB,IAAI,CAACI,iBAAD,EAAoBgB,SAApB,EAA+BL,IAA/B,CAA7B;AACA;;AAEF;AACE;AAdJ;AAgBD,KAzBC,CA2BF;;;AACA,UAAML,SAAS,CAACW,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCR,WAAW,CAACI,EAA9C,EAAkDK,GAAlD,CAAsD;AAC1DH,MAAAA,SAAS,EAAED;AAD+C,KAAtD,CAAN,CA5BE,CAgCF;;AACA,UAAMpB,GAAG,CAACQ,iBAAiB,CAACY,gBAAD,CAAlB,CAAT;AACD,GAlCD,CAkCE,OAAOK,KAAP,EAAc;AACd,UAAMzB,GAAG,CAACS,iBAAiB,CAACgB,KAAD,CAAlB,CAAT;AACD;AACF;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,QAAM3B,UAAU,CAACO,eAAe,CAACqB,gBAAjB,EAAmCf,kBAAnC,CAAhB;AACD;;AAED,UAAUgB,YAAV,GAAyB;AACvB,QAAM7B,UAAU,CAACW,eAAe,CAACmB,iBAAjB,EAAoChB,UAApC,CAAhB;AACD;;AAED,OAAO,UAAUiB,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CAACG,IAAI,CAACyB,gBAAD,CAAL,EAAyBzB,IAAI,CAAC2B,YAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, put, call } from \"redux-saga/effects\";\n\nimport {\n  addItemToCart,\n  getCartItems,\n  removeItemFromCart,\n  clearItemFromCart,\n} from \"./cart.utils\";\nimport UserActionTypes from \"../user/user.types\";\n\nimport {\n  clearCart,\n  updateCartSuccess,\n  updateCartFailure,\n} from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nfunction* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nfunction* updateCart({ payload: { currentUser, item, type } }) {\n  try {\n    const userId = currentUser.id;\n\n    let updatedCartItems = [];\n\n    if (type !== \"clear-cart\") {\n      // Retrieve user cart items from firestore collection\n      const cartItems = yield call(getCartItems, userId);\n\n      switch (type) {\n        case \"add\":\n          updatedCartItems = yield call(addItemToCart, cartItems, item);\n          break;\n\n        case \"remove\":\n          updatedCartItems = yield call(removeItemFromCart, cartItems, item);\n          break;\n\n        case \"clear-item\":\n          updatedCartItems = yield call(clearItemFromCart, cartItems, item);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    // Update users cart on firebase with new updated cart\n    yield firestore.collection(\"Carts\").doc(currentUser.id).set({\n      cartItems: updatedCartItems,\n    });\n\n    // Update cart items on client side\n    yield put(updateCartSuccess(updatedCartItems));\n  } catch (error) {\n    yield put(updateCartFailure(error));\n  }\n}\n\nfunction* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nfunction* onUpdateCart() {\n  yield takeLatest(CartActionTypes.UPDATE_CART_START, updateCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUpdateCart)]);\n}\n"]},"metadata":{},"sourceType":"module"}