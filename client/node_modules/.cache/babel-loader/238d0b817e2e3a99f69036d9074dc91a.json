{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { updateCartSuccess } from \"../cart/cart.actions\";\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { getCartItems } from \"../cart/cart.utils\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // Check and get cart for logged in user\n\n    yield put(updateCartSuccess(cartItems));\n    yield put();\n  } catch (error) {\n    console.log(\"there was an error\");\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // Get user cart\n\n    const cartItems = yield getCartItems(userAuth.uid);\n    yield put(updateCartSuccess(cartItems));\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signUserOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\nexport function* signUserUp({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signUserOut);\n}\nexport function* onUserSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUserUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onUserSignOut), call(onUserSignUp), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/tonysoukkeo/Desktop/Coding/crown-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","updateCartSuccess","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getCartItems","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","cartItems","error","console","log","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","uid","signUserOut","signOut","signUserUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onUserSignOut","SIGN_OUT_START","onUserSignUp","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"./user.types\";\nimport { updateCartSuccess } from \"../cart/cart.actions\";\n\nimport {\n  signInFailure,\n  signInSuccess,\n  signOutSuccess,\n  signOutFailure,\n  signUpFailure,\n  signUpSuccess,\n} from \"./user.actions\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\nimport { getCartItems } from \"../cart/cart.utils\";\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n\n    const userSnapshot = yield userRef.get();\n\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n\n    // Check and get cart for logged in user\n    yield put(updateCartSuccess(cartItems));\n    yield put();\n  } catch (error) {\n    console.log(\"there was an error\");\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n\n    // Get user cart\n    const cartItems = yield getCartItems(userAuth.uid);\n\n    yield put(updateCartSuccess(cartItems));\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signUserOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\n\nexport function* signUserUp({ payload: { displayName, email, password } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onUserSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signUserOut);\n}\n\nexport function* onUserSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUserUp);\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onUserSignOut),\n    call(onUserSignUp),\n    call(onSignUpSuccess),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}